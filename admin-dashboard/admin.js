const API_URL="https://ipaapi.runasp.net/api",API_URL2="https://ipaapi.runasp.net";async function fetchAboutPage(){try{const e=await fetch(`${API_URL}/AboutPage`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in about Page:",e)}}async function updateAboutPage(e){const t=new FormData;e.aboutTitle&&t.append("AboutTitle",e.aboutTitle),e.aboutImageUrl&&t.append("AboutImage",e.aboutImageUrl),e.aboutDescription&&t.append("AboutDescription",e.aboutDescription),e.missionTitle&&t.append("MissionTitle",e.missionTitle),e.missionImageUrl&&t.append("MissionImage",e.missionImageUrl),e.missionDescription&&t.append("MissionDescription",e.missionDescription);const o=await fetch(`${API_URL}/AboutPage`,{method:"PUT",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function fetchCertifications(){try{const e=await fetch(`${API_URL}/Certifications`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in certifications:",e)}}async function fetchCertificationById(e){try{const t=await fetch(`${API_URL}/Certifications/${e}`);if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching Data in certifications:",e)}}async function addCertification(e){const t=new FormData;t.append("CertificationId",e.CertificationId),t.append("Name",e.Name),t.append("Description",e.Description),t.append("Image",e.Image),t.append("DateAcquired",e.DateAcquired),t.append("IsActive",e.IsActive);const o=await fetch(`${API_URL}/Certifications`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function updateCertification(e){const t=new FormData;e.CertificationId&&t.append("CertificationId",e.CertificationId),e.Name&&t.append("Name",e.Name),e.Description&&t.append("Description",e.Description),e.Image&&t.append("Image",e.Image),e.DateAcquired&&t.append("DateAcquired",e.DateAcquired),e.IsActive&&t.append("IsActive",e.IsActive);const o=await fetch(`${API_URL}/Certifications/${e.Id}`,{method:"PUT",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deleteCertification(e){const t=await fetch(`${API_URL}/Certifications/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function toggleCertificationStatus(e){try{const t=await fetch(`${API_URL}/Certifications/toggle/${e}`,{method:"PUT",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error toggling certification status:",e)}}async function sendMessage(e){e.preventDefault();const t=document.getElementById("form-name").value.trim(),o=document.getElementById("form-email").value.trim(),n=document.getElementById("form-phone").value.trim(),r=document.getElementById("form-subject").value,a=document.getElementById("form-message").value.trim();if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(o))return void alert("Please enter a valid email address.");if(n&&!/^\+?\d{10,15}$/.test(n))return void alert("Please enter a valid phone number.");const s={name:t,email:o,phone:n,subject:r,message:a};try{const e=await fetch(`${API_URL}/Contact/send-message`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(e.ok)alert("Your message was sent successfully!"),document.getElementById("contactForm").reset();else{const t=await e.text();alert("Failed to send message: "+t)}}catch(e){console.log(e),alert("Something went wrong. Please try again later.")}}async function getAllMessages(){try{const e=await fetch(`${API_URL}/Contact/all`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching messages:",e)}}async function fetchMessageById(e){try{const t=await fetch(`${API_URL}/Contact/${e}`,{method:"GET",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching message:",e)}}async function deleteMessage(e){const t=await fetch(`${API_URL}/Contact/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function fetchCourses(){try{const e=await fetch(`${API_URL}/Courses`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in courses:",e)}}async function fetchCourseById(e){try{const t=await fetch(`${API_URL}/Courses/${e}`);if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching Data in courses:",e)}}async function addCourse(e){const t=new FormData;t.append("Name",e.Name),t.append("ShortDescription",e.ShortDescription),t.append("HoursCount",e.HoursCount),t.append("Rating",e.Rating),t.append("CourseInfo",e.CourseInfo),t.append("WhatYouWillLearn",e.WhatYouWillLearn),t.append("PriceBeforeDiscount",e.PriceBeforeDiscount),t.append("PriceAfterDiscount",e.PriceAfterDiscount),t.append("DiscountPercentage",e.DiscountPercentage),t.append("ScheduleStart",e.ScheduleStart),t.append("WeeksCount",e.WeeksCount),t.append("SessionTimings",e.SessionTimings),t.append("InstructorId",e.InstructorId),t.append("CourseTypeId",e.CourseTypeId),t.append("Image",e.Image),t.append("Location",e.Location);const o=await fetch(`${API_URL}/Courses`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function updateCourse(e){const t=new FormData;e.Name&&t.append("Name",e.Name),e.ShortDescription&&t.append("ShortDescription",e.ShortDescription),e.HoursCount&&t.append("HoursCount",e.HoursCount),e.Rating&&t.append("Rating",e.Rating),e.CourseInfo&&t.append("CourseInfo",e.CourseInfo),e.WhatYouWillLearn&&t.append("WhatYouWillLearn",e.WhatYouWillLearn),e.PriceBeforeDiscount&&t.append("PriceBeforeDiscount",e.PriceBeforeDiscount),e.PriceAfterDiscount&&t.append("PriceAfterDiscount",e.PriceAfterDiscount),e.DiscountPercentage&&t.append("DiscountPercentage",e.DiscountPercentage),e.ScheduleStart&&t.append("ScheduleStart",e.ScheduleStart),e.WeeksCount&&t.append("WeeksCount",e.WeeksCount),e.SessionTimings&&t.append("SessionTimings",e.SessionTimings),e.Location&&t.append("Location",e.Location),e.InstructorId&&t.append("InstructorId",e.InstructorId),e.CourseTypeId&&t.append("CourseTypeId",e.CourseTypeId),e.Image&&t.append("Image",e.Image);const o=await fetch(`${API_URL}/Courses/${e.Id}`,{method:"PUT",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deleteCourse(e){const t=await fetch(`${API_URL}/Courses/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function fetchCourseComments(e){try{const t=await fetch(`${API_URL}/Courses/get-courses-comments/${e}`);if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching Data in course comments:",e)}}async function addCourseComment(e){const t=new FormData;t.append("Name",e.Name),t.append("Image",e.Image),t.append("JobTitle",e.JobTitle),t.append("Text",e.Text),t.append("Rating",e.Rating);const o=await fetch(`${API_URL}/Courses/${e.CourseId}/add-comment`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deleteCourseComment(e){const t=await fetch(`${API_URL}/Courses/delete-comment/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function fetchCourseTypes(){try{const e=await fetch(`${API_URL}/CourseTypes`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in courses:",e)}}async function fetchCourseTypeById(e){try{const t=await fetch(`${API_URL}/CourseTypes/${e}`);if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching Data in courses:",e)}}async function addCourseType(e){const t=new FormData;t.append("Name",e.Name),t.append("Description",e.Description),t.append("Image",e.Image);const o=await fetch(`${API_URL}/CourseTypes`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function updateCourseType(e){const t=new FormData;e.Name&&t.append("Name",e.Name),e.Description&&t.append("Description",e.Description),e.Image&&t.append("Image",e.Image);const o=await fetch(`${API_URL}/CourseTypes/${e.Id}`,{method:"PUT",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deleteCourseType(e){const t=await fetch(`${API_URL}/CourseTypes/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function submitEmail(e){try{const t=await fetch(`${API_URL}/EmailList/subscribe`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e})});if(409==t.status)return void alert("Email already exists");if(!t.ok)throw new Error("Network response was not ok");201==t.status&&alert("Email added successfully");await t.json()}catch(e){console.error("Error submitting email:",e)}}async function fetchEmailList(){try{const e=await fetch(`${API_URL}/subscribe`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in email list:",e)}}async function getCsvEmailsFile(){const e=await fetch(`${API_URL}/EmailList/subscribed/csv`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");const t=await e.blob(),o=window.URL.createObjectURL(t),n=document.createElement("a");n.href=o,n.download="emails.csv",n.click()}async function fetchEvents(){try{const e=await fetch(`${API_URL}/Events`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in events:",e)}}async function fetchEventById(e){try{const t=await fetch(`${API_URL}/Events/${e}`);if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching Data in events:",e)}}async function addEvent(e){const t=new FormData;t.append("Name",e.Name),t.append("Description",e.Description),t.append("Location",e.Location),t.append("Image",e.Image),t.append("StartDate",e.StartDate),t.append("EndDate",e.EndDate),t.append("Status",e.Status),t.append("Capacity",e.Capacity),t.append("IsFeaturedEvent",e.IsFeaturedEvent);const o=await fetch(`${API_URL}/Events`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function updateEvent(e){const t=new FormData;e.Name&&t.append("Name",e.Name),e.Description&&t.append("Description",e.Description),e.Location&&t.append("Location",e.Location),e.Image&&t.append("Image",e.Image),e.StartDate&&t.append("StartDate",e.StartDate),e.EndDate&&t.append("EndDate",e.EndDate),e.Status&&t.append("Status",e.Status),e.Capacity&&t.append("Capacity",e.Capacity),e.IsFeaturedEvent&&t.append("IsFeaturedEvent",e.IsFeaturedEvent);const o=await fetch(`${API_URL}/Events/${e.Id}`,{method:"PUT",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deleteEvent(e){const t=await fetch(`${API_URL}/Events/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function fetchFooter(){try{const e=await fetch(`${API_URL}/Footer`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in footer:",e)}}async function updateFooter(e){const t=new FormData;e.Image&&t.append("Image",e.Image),e.Description&&t.append("Description",e.Description),e.Copyright&&t.append("Copyright",e.Copyright),e.Address&&t.append("Address",e.Address),e.Phone&&t.append("Phone",e.Phone),e.Email&&t.append("Email",e.Email),e.WorkingHours&&t.append("WorkingHours",e.WorkingHours),e.SocialMediaHTML&&t.append("SocialMediaHTML",e.SocialMediaHTML);const o=await fetch(`${API_URL}/Footer`,{method:"PUT",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function fetchGeneralInfo(){try{const e=await fetch(`${API_URL}/GeneralInfo`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in general info:",e)}}async function updateGeneralInfo(e){const t=new FormData;e.Image&&t.append("Image",e.Image),e.Video&&t.append("Video",e.Video),e.WelcomeMessage&&t.append("WelcomeMessage",e.WelcomeMessage),e.ShortMessage&&t.append("ShortMessage",e.ShortMessage),e.ButtonText&&t.append("ButtonText",e.ButtonText),e.TotalStudents&&t.append("TotalStudents",e.TotalStudents),e.TotalInstructors&&t.append("TotalInstructors",e.TotalInstructors),e.TotalHours&&t.append("TotalHours",e.TotalHours),e.TotalStars&&t.append("TotalStars",e.TotalStars);if(!(await fetch(`${API_URL}/GeneralInfo`,{method:"PUT",headers:{Authorization:AdminToken},body:t})).ok)throw new Error("Network response was not ok");return"GeneralInfo updated successfully"}async function fetchHomePageComments(){try{const e=await fetch(`${API_URL}/HomePageComments`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in home page comments:",e)}}async function addHomePageComment(e){const t=new FormData;t.append("Name",e.Name),t.append("Image",e.Image),t.append("JobTitle",e.JobTitle),t.append("Text",e.Text),t.append("Rating",e.Rating);const o=await fetch(`${API_URL}/HomePageComments`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deleteHomePageComment(e){const t=await fetch(`${API_URL}/HomePageComments/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return await t}async function fetchInstructors(){try{const e=await fetch(`${API_URL}/Instructors`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in instructors:",e)}}async function fetchInstructorById(e){try{const t=await fetch(`${API_URL}/Instructors/${e}`);if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching Data in instructors:",e)}}async function addInstructor(e){const t=new FormData;t.append("Name",e.Name),t.append("JobTitle",e.JobTitle),t.append("Description",e.Description),t.append("Image",e.Image),t.append("SocialMediaHTML",e.SocialMediaHTML),t.append("Rating",e.Rating);const o=await fetch(`${API_URL}/Instructors`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function updateInstructor(e){const t=new FormData;e.Name&&t.append("Name",e.Name),e.JobTitle&&t.append("JobTitle",e.JobTitle),e.Description&&t.append("Description",e.Description),e.Image&&t.append("Image",e.Image),e.SocialMediaHTML&&t.append("SocialMediaHTML",e.SocialMediaHTML),e.Rating&&t.append("Rating",e.Rating);const o=await fetch(`${API_URL}/Instructors/${e.Id}`,{method:"PUT",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deleteInstructor(e){const t=await fetch(`${API_URL}/Instructors/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function fetchPartners(){try{const e=await fetch(`${API_URL}/Partners`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in partners:",e)}}async function addPartner(e){const t=new FormData;t.append("Name",e.Name),t.append("Image",e.Image);const o=await fetch(`${API_URL}/Partners`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deletePartner(e){const t=await fetch(`${API_URL}/Partners/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function fetchProfessionalTeam(){try{const e=await fetch(`${API_URL}/ProfessionalTeam`);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in professional team:",e)}}async function addProfessionalTeamMember(e){const t=new FormData;t.append("FullName",e.FullName),t.append("Position",e.Position),t.append("Description",e.Description),t.append("Image",e.Image),e.SocialMediaHTML&&t.append("SocialMediaHTML",e.SocialMediaHTML);const o=await fetch(`${API_URL}/ProfessionalTeam`,{method:"POST",headers:{Authorization:AdminToken},body:t});if(!o.ok)throw new Error("Network response was not ok");return o}async function deleteProfessionalTeamMember(e){const t=await fetch(`${API_URL}/ProfessionalTeam/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function fetchTotal(){try{const e=await fetch(`${API_URL}/Statistics/totals`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in total:",e)}}async function fetchTrafficMonthly(){try{const e=await fetch(`${API_URL}/Statistics/Traffic/Monthly`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in traffic monthly:",e)}}async function fetchTrafficYearly(){try{const e=await fetch(`${API_URL}/Statistics/Traffic/Yearly`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in traffic yearly:",e)}}async function fetchTrafficCsv(){const e=await fetch(`${API_URL}/Statistics/Traffic/Csv`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");const t=await e.blob(),o=window.URL.createObjectURL(t),n=document.createElement("a");n.href=o,n.download="traffic.csv",n.click()}async function fetchAdminLog(){try{const e=await fetch(`${API_URL}/Statistics/AdminLog`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching Data in admin log:",e)}}async function fetchStudentEnrollment(){try{const e=await fetch(`${API_URL}/StudentEnrollment`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching student enrollment data:",e)}}async function fetchStudentEnrollmentById(e){try{const t=await fetch(`${API_URL}/StudentEnrollment/${e}`,{method:"GET",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching student enrollment data:",e)}}async function fetchStudentEnrollmentByCourseId(e){try{const t=await fetch(`${API_URL}/StudentEnrollment/Course/${e}`,{method:"GET",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(e){console.error("Error fetching student enrollment data:",e)}}async function fetchUnreadStudentEnrollment(){try{const e=await fetch(`${API_URL}/StudentEnrollment/Unread`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){console.error("Error fetching student enrollment data:",e)}}async function fetchStudentEnrollmentCsv(){try{const e=await fetch(`${API_URL}/StudentEnrollment/export-csv-all`,{method:"GET",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");const t=await e.blob(),o=window.URL.createObjectURL(t),n=document.createElement("a");n.href=o,n.download="student_enrollment.csv",n.click()}catch(e){console.error("Error downloading CSV file:",e)}}async function deleteStudentEnrollment(e){const t=await fetch(`${API_URL}/StudentEnrollment/${e}`,{method:"DELETE",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function toggleStudentEnrollment(e){const t=await fetch(`${API_URL}/StudentEnrollment/toggle/${e}`,{method:"PUT",headers:{Authorization:AdminToken}});if(!t.ok)throw new Error("Network response was not ok");return t}async function markAllStudentEnrollmentAsRead(){const e=await fetch(`${API_URL}/StudentEnrollment/MarkAllAsRead`,{method:"PUT",headers:{Authorization:AdminToken}});if(!e.ok)throw new Error("Network response was not ok");return e}let AdminToken=JSON.parse(localStorage.getItem("userData"))?.token;if(AdminToken){new Date(JSON.parse(localStorage.getItem("userData"))?.expiresAt)<new Date&&(alert("Session expired. Please log in again."),localStorage.removeItem("userData"),window.location.href="../login"),AdminToken="Bearer "+AdminToken}else window.location.href="../login";function LogOut(){localStorage.removeItem("userData"),window.location.href="../../"}function getColor(e,t=1){const o=["#FF6384","#36A2EB","#4BC0C0","#9966FF","#FF9F40"],n=o[e%o.length];return 1===t?n:n.replace("1)",`${t})`)}document.addEventListener("DOMContentLoaded",(async function(){const e=await fetchTotal(),t={coursesCount:Number(e.totalCourses),trainersCount:e.totalInstructors,studentsCount:e.totalUsers,eventsCount:e.totalEvents};function o(e,t,o=2e3){const n=document.getElementById(e),r=t/(o/16);let a=0;const s=setInterval((()=>{a+=r,a>=t&&(clearInterval(s),a=t),n.textContent=Math.floor(a)}),16)}o("coursesCount",t.coursesCount),o("trainersCount",t.trainersCount),o("studentsCount",t.studentsCount),o("eventsCount",t.eventsCount)})),document.addEventListener("DOMContentLoaded",(async function(){const e=await fetchTrafficMonthly(),t={};e.forEach((e=>{t[e.year]||(t[e.year]=new Array(12).fill(0)),t[e.year][e.month-1]=e.count}));const o=Object.entries(t).map((([e,t],o)=>({label:`Visitors ${e}`,data:t,fill:!1,borderColor:getColor(o),backgroundColor:getColor(o,.2),borderWidth:2}))),n=document.getElementById("siteActivityChart").getContext("2d");new Chart(n,{type:"line",data:{labels:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],datasets:o}})})),document.addEventListener("DOMContentLoaded",displayRecentUpdates),document.getElementById("loadMoreBtn").addEventListener("click",loadMoreUpdates);let allUpdates=[],displayedCount=0;const pageSize=5;async function displayRecentUpdates(){const e=await fetchAdminLog();allUpdates=e,displayedCount=0,document.getElementById("loadMoreBtn").style.display="block",document.getElementById("recentUpdates").innerHTML="",loadMoreUpdates()}function loadMoreUpdates(){const e=document.getElementById("recentUpdates"),t=allUpdates.slice(displayedCount,displayedCount+pageSize);t.forEach((t=>{const o=document.createElement("a"),n=new Date(t.timestamp),r=new Intl.DateTimeFormat("en-EG",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",hour12:!1,timeZone:"Africa/Cairo"}).format(n);o.className="list-group-item list-group-item-action",o.innerHTML=`\n                <div class="d-flex justify-content-between">\n                    <div>\n                        <h6 class="mb-1">${t.action}</h6>\n                        <small class="text-muted">${t.details}</small>\n                    </div>\n                    <div class="text-end">\n                        <small class="text-muted">${r}</small><br>\n                        <small class="text-muted">By: ${t.role}</small>\n                    </div>\n                </div>\n            `,e.appendChild(o)})),displayedCount+=t.length,displayedCount>=allUpdates.length&&(document.getElementById("loadMoreBtn").style.display="none")}displayRecentUpdates();const homePageBtn=document.getElementById("HomePageButton"),homePageBtn1=document.getElementById("HomePageButton1"),HeroForm=document.getElementById("editHeroForm"),CourseCategoryTable=document.getElementById("courseCategoriesTable"),StatesForm=document.getElementById("editStatsForm"),AddCategoryForm=document.getElementById("addCategoryForm"),editHomeModal=new bootstrap.Modal(document.getElementById("editHomeModal")),addCategoryModal=new bootstrap.Modal(document.getElementById("addCategoryModal")),editCategoryModal=new bootstrap.Modal(document.getElementById("EditCategoryModal")),addCommentModal=new bootstrap.Modal(document.getElementById("addHomePageComment")),commentsTableModal=new bootstrap.Modal(document.getElementById("homePageCommentsModal")),HomePageCommentsTable=document.getElementById("homePageCommentsTable"),EditCategoryForm=document.getElementById("EditCategoryForm"),AddHomePageCommentForm=document.getElementById("addHomePageCommentForm");let editingCourseTypeId=null;async function HomePageFunction(){const e=await fetchGeneralInfo(),t=await fetchCourseTypes(),o=await fetchHomePageComments();HeroForm.querySelector("#heroTitle").value=e.welcomeMessage,HeroForm.querySelector("#heroSubtitle").value=e.shortMessage,HeroForm.querySelector("#heroButtonText").value=e.buttonText;let n="",r="";for(const e of t)n+=`\n      <tr>\n        <td>${e.id}</td>\n        <td><img src="${API_URL2}/${e.imageUrl}" alt="${e.name}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n        <td>${e.name}</td>\n        <td>${e.description}</td>\n        <td>\n          <button class="btn btn-sm btn-primary" onclick="checkEditCourseType(${e.id})"><i class="bi bi-pencil"></i></button>            \n          <button class="btn btn-sm btn-danger" onclick="checkDeleteCourseType(${e.id})"><i class="bi bi-trash"></i></button>\n        </td>\n      </tr>`;for(const e of o)r+=`\n      <tr>\n        <td><img src="${API_URL2}/${e.imageUrl}" alt="${e.name}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n        <td>${e.name}</td>\n        <td>${e.rating}</td>\n        <td>${e.jobTitle}</td>\n        <td>${e.text}</td>\n        <td>\n          <button class="btn btn-sm btn-danger" onclick="CheckDeleteHomePageComment(${e.id})"><i class="bi bi-trash"></i></button>\n        </td>\n      </tr>`;CourseCategoryTable.querySelector("tbody").innerHTML=n,HomePageCommentsTable.querySelector("tbody").innerHTML=r,StatesForm.querySelector("#studentsStat").value=e.totalStudents,StatesForm.querySelector("#instructorsStat").value=e.totalInstructors,StatesForm.querySelector("#hoursStat").value=e.totalHours,StatesForm.querySelector("#ratingStat").value=e.totalStars}async function CheckDeleteHomePageComment(e){if(confirm("Are you sure you want to delete this comment?"))try{await deleteHomePageComment(e),showToast("Comment deleted successfully"),HomePageFunction()}catch(e){showToast2("Error deleting comment")}}async function checkEditCourseType(e){editingCourseTypeId=e;try{const t=await fetchCourseTypeById(e);EditCategoryForm.querySelector("#EditCategoryName").value=t.name,EditCategoryForm.querySelector("#EditDescriptionOfCourses").value=t.description,EditCategoryForm.querySelector("#EditCategoryImage").value="";new bootstrap.Modal(document.getElementById("EditCategoryModal")).show()}catch(e){showToast2("Error loading category")}}async function checkDeleteCourseType(e){if(confirm("Are you sure you want to delete this course type?"))try{await deleteCourseType(e),showToast("Course type deleted successfully"),HomePageFunction()}catch(e){showToast2("Error deleting course type")}}function showHomePageCommentsModal(){commentsTableModal.show()}homePageBtn.addEventListener("click",HomePageFunction),homePageBtn1.addEventListener("click",HomePageFunction),HeroForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Image:HeroForm.querySelector("#heroLogo").files[0],Video:HeroForm.querySelector("#heroVideo").files[0],WelcomeMessage:HeroForm.querySelector("#heroTitle").value,ShortMessage:HeroForm.querySelector("#heroSubtitle").value,ButtonText:HeroForm.querySelector("#heroButtonText").value};try{await updateGeneralInfo(t),showToast("Data saved successfully")}catch(e){showToast2("Error saving data")}})),StatesForm.addEventListener("submit",(async function(e){e.preventDefault();const t={TotalStudents:StatesForm.querySelector("#studentsStat").value,TotalInstructors:StatesForm.querySelector("#instructorsStat").value,TotalHours:StatesForm.querySelector("#hoursStat").value,TotalStars:StatesForm.querySelector("#ratingStat").value};try{await updateGeneralInfo(t),showToast("Data saved successfully"),HomePageFunction()}catch(e){showToast2("Error saving data")}})),AddCategoryForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Name:AddCategoryForm.querySelector("#categoryName").value,Description:AddCategoryForm.querySelector("#DescriptionOfCourses").value,Image:AddCategoryForm.querySelector("#categoryImage").files[0]};try{await addCourseType(t),showToast("Data saved successfully"),HomePageFunction()}catch(e){showToast2("Error saving data")}})),AddHomePageCommentForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Name:AddHomePageCommentForm.querySelector("#nameInput").value,Image:AddHomePageCommentForm.querySelector("#imgInput").files[0],JobTitle:AddHomePageCommentForm.querySelector("#jobInput").value,Text:AddHomePageCommentForm.querySelector("#commentInput").value,Rating:AddHomePageCommentForm.querySelector("#starsInput").value};try{await addHomePageComment(t),showToast("Data saved successfully"),HomePageFunction()}catch(e){showToast2("Error saving data")}})),EditCategoryForm.addEventListener("submit",(async function(e){if(e.preventDefault(),!editingCourseTypeId)return void showToast2("No course selected for editing.");const t={Id:editingCourseTypeId,Name:EditCategoryForm.querySelector("#EditCategoryName").value,Description:EditCategoryForm.querySelector("#EditDescriptionOfCourses").value,Image:EditCategoryForm.querySelector("#EditCategoryImage").files[0]};if(confirm("Are you sure you want to update this category?"))try{await updateCourseType(t),showToast("Category updated successfully"),HomePageFunction()}catch(e){showToast2("Error updating category")}})),document.getElementById("updateCourseCategory").addEventListener("click",(()=>{addCategoryModal.show()})),document.getElementById("addHomePageCommentBtn").addEventListener("click",(()=>{addCommentModal.show()})),document.getElementById("addCategoryModal").addEventListener("hidden.bs.modal",(()=>{editHomeModal._element.classList.add("show"),editHomeModal._backdrop.classList.add("show"),document.body.classList.add("modal-open")})),document.getElementById("addHomePageComment").addEventListener("hidden.bs.modal",(()=>{commentsTableModal._element.classList.add("show"),commentsTableModal._backdrop.classList.add("show"),document.body.classList.add("modal-open")}));const aboutPageBtn=document.getElementById("AboutPageButton"),aboutPageBtn1=document.getElementById("AboutPageButton1"),aboutForm=document.getElementById("aboutEditForm");async function AboutPageFunction(){const e=await fetchAboutPage();aboutForm.querySelector("#aboutTitle").value=e.aboutTitle,aboutForm.querySelector("#aboutDescription").value=e.aboutDescription,aboutForm.querySelector("#missionTitle").value=e.missionTitle,aboutForm.querySelector("#missionDescription").value=e.missionDescription}aboutPageBtn.addEventListener("click",AboutPageFunction()),aboutPageBtn1.addEventListener("click",AboutPageFunction()),aboutForm.addEventListener("submit",(async function(e){e.preventDefault();const t={aboutTitle:aboutForm.querySelector("#aboutTitle").value,aboutDescription:aboutForm.querySelector("#aboutDescription").value,aboutImageUrl:aboutForm.querySelector("#aboutImage").files[0],missionTitle:aboutForm.querySelector("#missionTitle").value,missionDescription:aboutForm.querySelector("#missionDescription").value,missionImageUrl:aboutForm.querySelector("#missionImage").files[0]};console.log(t);if(confirm("Are you sure you want to Update This Data?"))try{await updateAboutPage(t),showToast("Data saved successfully"),AboutPageFunction()}catch(e){showToast2("Error saving data")}}));const footerBtn=document.getElementById("FooterButton"),footerBtn1=document.getElementById("FooterButton1"),footerForm=document.getElementById("footerForm");async function FooterFunction(){const e=await fetchFooter();footerForm.querySelector("#footerDescription").value=e.description,footerForm.querySelector("#footerCopyright").value=e.copyright,footerForm.querySelector("#footerAddress").value=e.address,footerForm.querySelector("#footerPhone").value=e.phone,footerForm.querySelector("#footerEmail").value=e.email,footerForm.querySelector("#footerWorkingHours").value=e.workingHours,footerForm.querySelector("#footerSocialMediaHtml").value=e.socialMediaHTML}footerBtn.addEventListener("click",FooterFunction()),footerBtn1.addEventListener("click",FooterFunction()),footerForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Description:footerForm.querySelector("#footerDescription").value,Copyright:footerForm.querySelector("#footerCopyright").value,Address:footerForm.querySelector("#footerAddress").value,Phone:footerForm.querySelector("#footerPhone").value,Email:footerForm.querySelector("#footerEmail").value,WorkingHours:footerForm.querySelector("#footerWorkingHours").value,SocialMediaHTML:footerForm.querySelector("#footerSocialMediaHtml").value,Image:footerForm.querySelector("#logoUrl").files[0]};if(confirm("Are you sure you want to Update This Data?"))try{await updateFooter(t),showToast("Data saved successfully"),FooterFunction()}catch(e){showToast2("Error saving data")}}));const eventsTable=document.getElementById("eventsTable"),addEventForm=document.getElementById("addEventForm"),editEventForm=document.getElementById("editEventForm"),EventBtn=document.getElementById("EventsButton"),EventBtn1=document.getElementById("EventsButton1"),addEventBtn=document.getElementById("addEventBtn");async function EventsFunction(){const e=await fetchEvents();let t="";for(const o of e)t+=`\n                <tr>\n                <td>${o.id}</td>\n                <td><img src="${API_URL2}/${o.imageUrl}" alt="${o.name}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n                <td>${o.name}</td>\n                <td>${new Date(o.startDate).toISOString().slice(0,16)}</td>\n                <td>${o.location}</td>\n                <td>${o.status}</td>\n                <td>\n                    <button class="btn btn-sm btn-primary" onclick="CheckUpdateEvent(${o.id})">\n                        <i class="bi bi-pencil"></i>\n                    </button>\n                    <button class="btn btn-sm btn-danger" onclick="CheckDeleteEvent(${o.id})">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n                </tr>\n            `;eventsTable.querySelector("tbody").innerHTML=t}async function CheckDeleteEvent(e){if(confirm("Are you sure you want to Delete This Event?"))try{await deleteEvent(e),showToast("Event deleted successfully"),EventsFunction()}catch(e){showToast2("Error deleting event")}}async function CheckUpdateEvent(e){const t=await fetchEventById(e);console.log(t),editEventForm.querySelector("#editEventId").value=t.id,editEventForm.querySelector("#editEventImage").value="",editEventForm.querySelector("#editEventName").value=t.name,editEventForm.querySelector("#editEventLocation").value=t.location,editEventForm.querySelector("#editEventStartDate").value=new Date(t.startDate).toISOString().slice(0,16),editEventForm.querySelector("#editEventEndDate").value=new Date(t.endDate).toISOString().slice(0,16),editEventForm.querySelector("#editEventDescription").value=t.description,editEventForm.querySelector("#editEventStatus").value=t.status,editEventForm.querySelector("#editEventCapacity").value=t.capacity,editEventForm.querySelector("#editEventFeatured").checked=t.isFeaturedEvent;new bootstrap.Modal(document.getElementById("editEventFormModal")).show(),editEventForm.onsubmit=null,editEventForm.onsubmit=async function(t){t.preventDefault();const o={Id:e,Name:editEventForm.querySelector("#editEventName").value,Location:editEventForm.querySelector("#editEventLocation").value,StartDate:editEventForm.querySelector("#editEventStartDate").value,EndDate:editEventForm.querySelector("#editEventEndDate").value,Description:editEventForm.querySelector("#editEventDescription").value,Status:editEventForm.querySelector("#editEventStatus").value,Capacity:editEventForm.querySelector("#editEventCapacity").value,IsFeaturedEvent:editEventForm.querySelector("#editEventFeatured").checked,Image:editEventForm.querySelector("#editEventImage").files[0]};if(confirm("Are you sure you want to Update This Event?"))try{await updateEvent(o),showToast("Data saved successfully"),EventsFunction()}catch(e){showToast2("Error saving data")}}}function showAddEventModal(){new bootstrap.Modal(document.getElementById("eventFormModal")).show(),addEventForm.reset()}EventBtn.addEventListener("click",EventsFunction),EventBtn1.addEventListener("click",EventsFunction),addEventBtn.addEventListener("click",(function(){new bootstrap.Modal(document.getElementById("addEventFormModal")).show(),addEventForm.reset()})),addEventForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Name:addEventForm.querySelector("#addEventName").value,Location:addEventForm.querySelector("#addEventLocation").value,StartDate:addEventForm.querySelector("#addEventStartDate").value,EndDate:addEventForm.querySelector("#addEventEndDate").value,Description:addEventForm.querySelector("#addEventDescription").value,Status:addEventForm.querySelector("#addEventStatus").value,Capacity:addEventForm.querySelector("#addEventCapacity").value,IsFeaturedEvent:addEventForm.querySelector("#addEventFeatured").checked,Image:addEventForm.querySelector("#addEventImage").files[0]};if(confirm("Are you sure you want to Add This Event?"))try{await addEvent(t),showToast("Data saved successfully"),EventsFunction()}catch(e){showToast2("Error saving data")}}));const coursesBtn=document.getElementById("CoursesButton"),coursesBtn1=document.getElementById("CoursesButton1"),addCourseBtn=document.getElementById("addCourseBtn"),coursesTable=document.getElementById("coursesTable"),addCourseForm=document.getElementById("addCourseForm"),newUpdateForm=document.getElementById("updateCourseForm"),updateCourseCategory1=document.getElementById("updateCourseCategory1"),addCourseCategory1=document.getElementById("addCourseCategory1"),addCourseInstructor=document.getElementById("addCourseInstructor"),updateCourseInstructor=document.getElementById("updateCourseInstructor"),commentCourseTable=document.getElementById("commentCourseTable"),addCommentForm=document.getElementById("addCommentForm");let CourseID=0;async function CoursesFunction(){const e=await fetchCourses();let t="";for(const o of e)t+=`\n                <tr>\n                <td>${o.id}</td>\n                <td><img src="${API_URL2}/${o.imageUrl}" alt="${o.name}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n                <td>${o.name}</td>\n                <td>${o.courseType.name}</td>\n                <td>${o.hoursCount}</td>\n                <td>\n                  <button class="btn btn-sm btn-primary" onclick="OpenCommentCorsModal(${o.id})">\n                    <i class="bi bi-chat-left-text me-2"></i>\n                  </button>\n                </td>\n                <td>\n                    <button class="btn btn-sm btn-primary" onclick="CheckUpdateCourse(${o.id})">\n                        <i class="bi bi-pencil"></i>\n                    </button>            \n                    <button class="btn btn-sm btn-danger" onclick="CheckDeleteCourse(${o.id})">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n                </tr>\n            `;coursesTable.querySelector("tbody").innerHTML=t}async function CheckDeleteCourse(e){if(confirm("Are you sure you want to delete this course?"))try{await deleteCourse(e),showToast("Course deleted successfully"),CoursesFunction()}catch(e){showToast2("Error deleting course")}}async function CheckUpdateCourse(e){const t=await fetchCourseById(e),o=await fetchCourseTypes(),n=await fetchInstructors();let r="",a="";for(const e of n)a+=`\n        <option value="${e.id}">${e.name}</option>\n      `;updateCourseInstructor.innerHTML=a;for(const e of o)r+=`\n                <option value="${e.id}">${e.name}</option>\n            `;updateCourseCategory1.innerHTML=r,newUpdateForm.querySelector("#updateCourseName").value=t.name,newUpdateForm.querySelector("#updateCourseCategory1").value=t.courseType.id,newUpdateForm.querySelector("#updateCourseDuration").value=t.hoursCount,newUpdateForm.querySelector("#updateCourseDescription").value=t.shortDescription,newUpdateForm.querySelector("#updateCourseFullInformation").value=t.courseInfo,newUpdateForm.querySelector("#updateCourseLocation").value=t.location,newUpdateForm.querySelector("#updateCourseSessionTiming").value=t.sessionTimings,newUpdateForm.querySelector("#updateCourseWhatYouLearn").value=t.whatYouWillLearn,newUpdateForm.querySelector("#updateCourseRate").value=t.rating,newUpdateForm.querySelector("#updateCourseOriginalPrice").value=t.priceBeforeDiscount,newUpdateForm.querySelector("#updateCourseDiscountedPrice").value=t.priceAfterDiscount,newUpdateForm.querySelector("#updateCourseDiscountPercent").value=t.discountPercentage,newUpdateForm.querySelector("#updateCourseStartDate").value=new Date(t.scheduleStart).toISOString().slice(0,10),newUpdateForm.querySelector("#updateCourseWeeksCount").value=t.weeksCount,newUpdateForm.querySelector("#updateCourseInstructor").value=t.instructor.id,newUpdateForm.querySelector("#updateCourseImage").value="";new bootstrap.Modal(document.getElementById("updateCourseModal")).show(),newUpdateForm.onsubmit=null,newUpdateForm.onsubmit=async function(t){t.preventDefault();const o={Id:e,Name:newUpdateForm.querySelector("#updateCourseName").value,Image:newUpdateForm.querySelector("#updateCourseImage").files[0],HoursCount:newUpdateForm.querySelector("#updateCourseDuration").value,ShortDescription:newUpdateForm.querySelector("#updateCourseDescription").value,CourseInfo:newUpdateForm.querySelector("#updateCourseFullInformation").value,WhatYouWillLearn:newUpdateForm.querySelector("#updateCourseWhatYouLearn").value,Rating:newUpdateForm.querySelector("#updateCourseRate").value,PriceBeforeDiscount:newUpdateForm.querySelector("#updateCourseOriginalPrice").value,PriceAfterDiscount:newUpdateForm.querySelector("#updateCourseDiscountedPrice").value,DiscountPercentage:newUpdateForm.querySelector("#updateCourseDiscountPercent").value,ScheduleStart:newUpdateForm.querySelector("#updateCourseStartDate").value,WeeksCount:newUpdateForm.querySelector("#updateCourseWeeksCount").value,InstructorId:newUpdateForm.querySelector("#updateCourseInstructor").value,Location:newUpdateForm.querySelector("#updateCourseLocation").value,SessionTimings:newUpdateForm.querySelector("#updateCourseSessionTiming").value,CourseTypeId:newUpdateForm.querySelector("#updateCourseCategory1").value};if(confirm("Are you sure you want to Update This Course?"))try{await updateCourse(o),showToast("Data saved successfully"),CoursesFunction()}catch(e){showToast2("Error saving data")}}}async function OpenCommentCorsModal(e){CourseID=e;const t=await fetchCourseComments(e);let o="";for(const e of t)o+=`\n                <tr>\n                <td><img src="${API_URL2}/${e.imageUrl}" alt="${e.name}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n                <td>${e.name}</td>\n                <td>${e.jobTitle}</td>\n                <td>${e.text}</td>\n                <td>\n                    <button class="btn btn-sm btn-danger" onclick="CheckDeleteComment(${e.id})">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n                </tr>\n            `;commentCourseTable.querySelector("tbody").innerHTML=o;new bootstrap.Modal(document.getElementById("commentCorsModal")).show()}async function CheckDeleteComment(e){if(confirm("Are you sure you want to delete this comment?"))try{await deleteCourseComment(e),showToast("Comment deleted successfully"),OpenCommentCorsModal(e)}catch(e){showToast2("Error deleting comment")}}function showAddCourseModal(){new bootstrap.Modal(document.getElementById("addCourseModal")).show()}coursesBtn.addEventListener("click",CoursesFunction()),coursesBtn1.addEventListener("click",CoursesFunction()),addCourseBtn.addEventListener("click",(async function(){const e=await fetchCourseTypes(),t=await fetchInstructors();let o='<option value="" selected disabled >Select Category</option>',n='<option value="" selected disabled >Select Instructor</option>';for(const e of t)n+=`\n        <option value="${e.id}">${e.name}</option>\n      `;addCourseInstructor.innerHTML=n;for(const t of e)o+=`\n                <option value="${t.id}">${t.name}</option>\n            `;addCourseCategory1.innerHTML=o;new bootstrap.Modal(document.getElementById("addCourseModal")).show()})),addCourseForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Name:addCourseForm.querySelector("#addCourseName").value,Image:addCourseForm.querySelector("#addCourseImage").files[0],HoursCount:addCourseForm.querySelector("#addCourseDuration").value,ShortDescription:addCourseForm.querySelector("#addCourseDescription").value,CourseInfo:addCourseForm.querySelector("#addCourseFullInformation").value,WhatYouWillLearn:addCourseForm.querySelector("#addCourseWhatYouLearn").value,Rating:addCourseForm.querySelector("#addCourseRate").value,PriceBeforeDiscount:addCourseForm.querySelector("#addCourseOriginalPrice").value,PriceAfterDiscount:addCourseForm.querySelector("#addCourseDiscountedPrice").value,DiscountPercentage:addCourseForm.querySelector("#addCourseDiscountPercent").value,ScheduleStart:addCourseForm.querySelector("#addCourseStartDate").value,WeeksCount:addCourseForm.querySelector("#addCourseWeeksCount").value,InstructorId:addCourseForm.querySelector("#addCourseInstructor").value,Location:addCourseForm.querySelector("#addCourseLocation").value,SessionTimings:addCourseForm.querySelector("#addCourseSessionTiming").value,CourseTypeId:addCourseForm.querySelector("#addCourseCategory1").value};try{await addCourse(t),showToast("Course added successfully"),CoursesFunction()}catch(e){showToast2("Error adding course")}})),addCommentForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Name:addCommentForm.querySelector("#userName").value,Image:addCommentForm.querySelector("#userImage").files[0],JobTitle:addCommentForm.querySelector("#userTitle").value,Text:addCommentForm.querySelector("#ratingInput").value,CourseId:CourseID,Rating:addCommentForm.querySelector("#ratingInput").value};try{await addCourseComment(t),showToast("Comment added successfully"),OpenCommentCorsModal(CourseID)}catch(e){showToast2("Error adding comment")}}));const studentEnrollmentBtn=document.getElementById("StudentsButton"),studentEnrollmentBtn1=document.getElementById("StudentsButton1"),onlyUnreadBtn=document.getElementById("onlyUnreadBtn"),readAllBtn=document.getElementById("readAllBtn"),downloadStudentExcelBtn=document.getElementById("downloadStudentExcelBtn"),allStudents=[];function loadMoreStudents(){const e=document.getElementById("studentsTbody"),t=document.getElementById("loadMoreBtn"),o=filteredStudents.slice(displayedStudents,displayedStudents+4);o.forEach((t=>{const o=document.createElement("tr");let n=t.isReaded?`<button class="btn btn-sm btn-outline-success" onclick="markAsUnRead(${t.id})"><i class="bi bi-check"></i> Readed</button>`:`<button class="btn btn-sm btn-outline-danger" onclick="markAsRead(${t.id})"><i class="bi bi-x"></i> Unread</button>`;o.innerHTML=`\n      <td>${t.id}</td>\n      <td>${t.name}</td>\n      <td>${t.phone}</td>\n      <td>${t.email}</td>\n      <td>${t.courseName}</td>\n      <td>${new Date(t.dateTime).toISOString().slice(0,16)}</td>\n      <td>${n}</td>\n      <td><button class="btn btn-sm btn-outline-danger delete-btn" onclick="CheckDeleteStudent(${t.id})"><i class="bi bi-trash"></i></button></td>\n    `,e.appendChild(o)})),displayedStudents+=o.length,displayedStudents>=filteredStudents.length?t.style.display="none":t.style.display="block"}function filterStudents(){const e=document.getElementById("studentSearch").value.toLowerCase(),t=document.getElementById("courseFilter").value;filteredStudents=allStudents.filter((o=>{const n=o.name.toLowerCase().includes(e)||o.email.toLowerCase().includes(e),r="all"===t||o.courseName===t;return n&&r})),document.getElementById("studentsTbody").innerHTML="",displayedStudents=0,loadMoreStudents()}async function StudentEnrollmentFunction(){await fetchStudentEnrollment().then((e=>{allStudents.length=0,allStudents.push(...e)}));const e=await fetchCourses();let t='<option value="all" selected>All Courses</option>';for(const o of e)t+=`\n                <option value="${o.name}">${o.name}</option>\n            `;document.getElementById("courseFilter").innerHTML=t,document.getElementById("studentSearch").addEventListener("input",filterStudents),filterStudents()}async function markAsRead(e){const t=allStudents.find((t=>t.id===e));if(t)try{await toggleStudentEnrollment(e),t.isReaded=!0,showToast("Student marked as read"),filterStudents()}catch(e){showToast2("Error marking student as read")}}async function markAsUnRead(e){const t=allStudents.find((t=>t.id===e));if(t)try{await toggleStudentEnrollment(e),t.isReaded=!1,showToast("Student marked as unread"),filterStudents()}catch(e){showToast2("Error marking student as unread")}}async function CheckDeleteStudent(e){if(confirm("Are you sure you want to delete this student?"))try{await deleteStudentEnrollment(e);const t=allStudents.findIndex((t=>t.id===e));-1!==t&&allStudents.splice(t,1),showToast("Student deleted successfully"),filterStudents()}catch(e){showToast2("Error deleting student")}}studentEnrollmentBtn.addEventListener("click",StudentEnrollmentFunction),studentEnrollmentBtn1.addEventListener("click",StudentEnrollmentFunction),onlyUnreadBtn.addEventListener("click",(function(){filteredStudents=allStudents.filter((e=>!e.isReaded)),document.getElementById("studentsTbody").innerHTML="",displayedStudents=0,loadMoreStudents()})),readAllBtn.addEventListener("click",(async function(){if(confirm("Are you sure you want to mark all students as read?"))try{await markAllStudentEnrollmentAsRead(),allStudents.forEach((e=>{e.isReaded=!0})),showToast("All students marked as read")}catch(e){showToast2("Error marking students as read")}})),downloadStudentExcelBtn.addEventListener("click",(async function(){if(confirm("Are you sure you want to download the students data as Excel?"))try{await fetchStudentEnrollmentCsv(),showToast("Excel file downloaded successfully")}catch(e){showToast2("Error downloading Excel file")}}));let displayedStudents=0,filteredStudents=[];document.addEventListener("DOMContentLoaded",(function(){filteredStudents=[...allStudents],loadMoreStudents()}));const partnersTable=document.getElementById("partnersTable"),addPartnerForm=document.getElementById("partnerForm"),partnersBtn=document.getElementById("PartnersButton"),partnersBtn1=document.getElementById("PartnersButton1");async function PartnersFunction(){const e=await fetchPartners();let t="";for(const o of e)t+=`\n                <tr>\n                <td>${o.id}</td>\n                <td><img src="${API_URL2}/${o.logoUrl}" alt="${o.name}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n                <td>${o.name}</td>\n                <td>\n                    <button class="btn btn-sm btn-danger" onclick="CheckDeletePartner(${o.id})">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n                </tr>\n            `;partnersTable.querySelector("tbody").innerHTML=t}async function CheckDeletePartner(e){if(confirm("Are you sure you want to delete this partner?"))try{await deletePartner(e),showToast("Partner deleted successfully"),PartnersFunction()}catch(e){showToast2("Error deleting partner")}}function showAddPartnerModal(){new bootstrap.Modal(document.getElementById("partnerFormModal")).show()}partnersBtn.addEventListener("click",PartnersFunction()),partnersBtn1.addEventListener("click",PartnersFunction()),addPartnerForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Name:addPartnerForm.querySelector("#partnerName").value,Image:addPartnerForm.querySelector("#partnerLogo").files[0]};if(confirm("Are you sure you want to Add This Partner?"))try{await addPartner(t),showToast("Data saved successfully"),PartnersFunction()}catch(e){showToast2("Error saving data")}}));const instructorsTable=document.getElementById("instructorsTable"),addInstructorForm=document.getElementById("addInstructorForm"),updateInstructorForm=document.getElementById("updateInstructorForm"),instructorsBtn=document.getElementById("InstructorButton"),instructorsBtn1=document.getElementById("InstructorButton1");async function InstructorsFunction(){const e=await fetchInstructors();let t="";for(const o of e)t+=`\n                <tr>\n                <td>${o.id}</td>\n                <td><img src="${API_URL2}/${o.imageUrl}" alt="${o.name}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n                <td>${o.name}</td>\n                <td>${o.jobTitle}</td>\n                <td>${o.description}</td>\n                <td>\n                    <button class="btn btn-sm btn-primary" onclick="CheckUpdateInstructor(${o.id})">\n                        <i class="bi bi-pencil"></i>\n                    </button>            \n                    <button class="btn btn-sm btn-danger" onclick="CheckDeleteInstructor(${o.id})">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n                </tr>\n            `;instructorsTable.querySelector("tbody").innerHTML=t}async function CheckDeleteInstructor(e){if(confirm("Are you sure you want to delete this instructor?"))try{await deleteInstructor(e),showToast("Instructor deleted successfully"),InstructorsFunction()}catch(e){showToast2("Error deleting instructor")}}async function CheckUpdateInstructor(e){const t=await fetchInstructorById(e);updateInstructorForm.querySelector("#updateInstructorName").value=t.name,updateInstructorForm.querySelector("#updateInstructorJobTitle").value=t.jobTitle,updateInstructorForm.querySelector("#updateInstructorDescription").value=t.description,updateInstructorForm.querySelector("#updateInstructorRating").value=t.rating,updateInstructorForm.querySelector("#updateInstructorSocialMedia").value=t.socialMediaHTML,updateInstructorForm.querySelector("#updateInstructorId").value=t.id,updateInstructorForm.querySelector("#updateInstructorImage").value="";new bootstrap.Modal(document.getElementById("updateInstructorFormModal")).show(),updateInstructorForm.onsubmit=null,updateInstructorForm.onsubmit=async function(t){t.preventDefault();const o={Id:e,Name:updateInstructorForm.querySelector("#updateInstructorName").value,Image:updateInstructorForm.querySelector("#updateInstructorImage").files[0],JobTitle:updateInstructorForm.querySelector("#updateInstructorJobTitle").value,Description:updateInstructorForm.querySelector("#updateInstructorDescription").value,Rating:updateInstructorForm.querySelector("#updateInstructorRating").value,SocialMediaHTML:updateInstructorForm.querySelector("#updateInstructorSocialMedia").value};if(confirm("Are you sure you want to Update This Instructor?"))try{await updateInstructor(o),showToast("Data saved successfully"),InstructorsFunction()}catch(e){showToast2("Error saving data")}}}function showAddInstructorModal(){new bootstrap.Modal(document.getElementById("addInstructorFormModal")).show()}instructorsBtn.addEventListener("click",InstructorsFunction()),instructorsBtn1.addEventListener("click",InstructorsFunction()),addInstructorForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Name:addInstructorForm.querySelector("#addInstructorName").value,Image:addInstructorForm.querySelector("#addInstructorImage").files[0],JobTitle:addInstructorForm.querySelector("#addInstructorJobTitle").value,Description:addInstructorForm.querySelector("#addInstructorDescription").value,Rating:addInstructorForm.querySelector("#addInstructorRating").value,SocialMediaHTML:addInstructorForm.querySelector("#addInstructorSocialMedia").value};if(confirm("Are you sure you want to Add This Instructor?"))try{await addInstructor(t),showToast("Data saved successfully"),InstructorsFunction()}catch(e){showToast2("Error saving data")}}));const accreditationTable=document.getElementById("accreditationTable"),addAccreditationForm=document.getElementById("addAccreditationForm"),updateAccreditationForm=document.getElementById("updateAccreditationForm"),accreditationBtn=document.getElementById("AccreditationButton"),accreditationBtn1=document.getElementById("AccreditationButton1");async function AccreditationFunction(){const e=await fetchCertifications();let t="";for(const o of e)t+=`\n                <tr>\n                <td>${o.certificationId}</td>\n                <td><img src="${API_URL2}/${o.imageUrl}" alt="${o.name}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n                <td>${o.name}</td>\n                <td>${o.dateAcquired}</td>\n                <td>${o.isActive}</td>\n                <td>\n                    <button class="btn btn-sm btn-primary" onclick="CheckUpdateAccreditation(${o.id})">\n                        <i class="bi bi-pencil"></i>\n                    </button>            \n                    <button class="btn btn-sm btn-danger" onclick="CheckDeleteAccreditation(${o.id})">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n                </tr>\n            `;accreditationTable.querySelector("tbody").innerHTML=t}async function CheckDeleteAccreditation(e){if(confirm("Are you sure you want to delete this accreditation?"))try{await deleteCertification(e),showToast("Accreditation deleted successfully"),AccreditationFunction()}catch(e){showToast2("Error deleting accreditation")}}async function CheckUpdateAccreditation(e){const t=await fetchCertificationById(e);updateAccreditationForm.querySelector("#updateAccreditationName").value=t.name,updateAccreditationForm.querySelector("#updateAccreditationDateAcquired").value=new Date(t.dateAcquired).toISOString().slice(0,10),updateAccreditationForm.querySelector("#updateAccreditationStatus").checked=t.isActive,updateAccreditationForm.querySelector("#updateAccreditationId").value=t.certificationId,updateAccreditationForm.querySelector("#updateAccreditationDescription").value=t.description,updateAccreditationForm.querySelector("#updateAccreditationImage").value="";new bootstrap.Modal(document.getElementById("updateAccreditationFormModal")).show(),updateAccreditationForm.onsubmit=null,updateAccreditationForm.onsubmit=async function(t){t.preventDefault();const o={Id:e,Name:updateAccreditationForm.querySelector("#updateAccreditationName").value,Image:updateAccreditationForm.querySelector("#updateAccreditationImage").files[0],DateAcquired:updateAccreditationForm.querySelector("#updateAccreditationDateAcquired").value,IsActive:updateAccreditationForm.querySelector("#updateAccreditationStatus").checked,Description:updateAccreditationForm.querySelector("#updateAccreditationDescription").value,CertificationId:updateAccreditationForm.querySelector("#updateAccreditationId").value};if(confirm("Are you sure you want to Update This Accreditation?"))try{await updateCertification(o),showToast("Data saved successfully"),AccreditationFunction()}catch(e){showToast2("Error saving data")}}}function openAddAccreditationModal(){new bootstrap.Modal(document.getElementById("addAccreditationFormModal")).show()}accreditationBtn.addEventListener("click",AccreditationFunction()),accreditationBtn1.addEventListener("click",AccreditationFunction()),addAccreditationForm.addEventListener("submit",(async function(e){e.preventDefault();const t={Name:addAccreditationForm.querySelector("#addAccreditationName").value,Image:addAccreditationForm.querySelector("#addAccreditationImage").files[0],DateAcquired:addAccreditationForm.querySelector("#addAccreditationDateAcquired").value,IsActive:addAccreditationForm.querySelector("#addAccreditationStatus").checked,Description:addAccreditationForm.querySelector("#addAccreditationDescription").value,CertificationId:addAccreditationForm.querySelector("#addAccreditationId").value};if(confirm("Are you sure you want to Add This Accreditation?"))try{await addCertification(t),showToast("Data saved successfully"),AccreditationFunction()}catch(e){showToast2("Error saving data")}}));const teamTable=document.getElementById("teamTable"),teamBtn=document.getElementById("TeamButton"),teamBtn1=document.getElementById("TeamButton1"),addTeamForm=document.getElementById("addMemberForm");async function TeamFunction(){const e=await fetchProfessionalTeam();let t="";for(const o of e)t+=`\n                <tr>\n                <td><img src="${API_URL2}/${o.imageUrl}" alt="${o.fullName}" style="width:50px; height:50px; object-fit:cover; border-radius:50%;"></td>\n                <td>${o.fullName}</td>\n                <td>${o.position}</td>\n                <td>${o.description}</td>\n                <td>          \n                    <button class="btn btn-sm btn-danger" onclick="CheckDeleteMember(${o.id})">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n                </tr>\n            `;teamTable.querySelector("tbody").innerHTML=t}async function CheckDeleteMember(e){if(confirm("Are you sure you want to delete this member?"))try{await deleteProfessionalTeamMember(e),showToast("Member deleted successfully"),TeamFunction()}catch(e){showToast2("Error deleting member")}}function showAddMemberModal(){new bootstrap.Modal(document.getElementById("AddMemberModal")).show()}function showToast2(e){document.getElementById("toastBody2").textContent=e;new bootstrap.Toast(document.getElementById("saveToast2")).show()}function showToast(e){document.getElementById("toastBody").textContent=e;new bootstrap.Toast(document.getElementById("saveToast")).show()}teamBtn.addEventListener("click",TeamFunction()),teamBtn1.addEventListener("click",TeamFunction()),addTeamForm.addEventListener("submit",(async function(e){e.preventDefault();const t={FullName:addTeamForm.querySelector("#addMemberName").value,Image:addTeamForm.querySelector("#addMemberImage").files[0],Position:addTeamForm.querySelector("#addMemberPosition").value,Description:addTeamForm.querySelector("#addMemberDescription").value,SocialMediaHTML:addTeamForm.querySelector("#addMemberSocialMedia").value};if(confirm("Are you sure you want to Add This Member?"))try{await addProfessionalTeamMember(t),showToast("Data saved successfully"),TeamFunction()}catch(e){showToast2("Error saving data")}}));const messageBtn=document.getElementById("MessagesButton"),messageBtn1=document.getElementById("MessagesButton1"),messagesTable=document.getElementById("messagesTable");async function MessagesFunction(){const e=await getAllMessages();let t="";for(const o of e)t+=`\n                <tr data-subject="${o.subject}">\n                <td>${o.name}</td>\n                <td>${o.phone}</td>\n                <td>${o.email}</td>\n                <td>${o.subject}</td>\n                <td><button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#messageViewModal" onclick="showMessage('${o.message}')">View</button></td>\n                <td><button type="button" class="btn btn-danger btn-sm" onclick="checkDeleteMessage(${o.id})">Delete</button></td> \n                </tr>\n            `;messagesTable.querySelector("tbody").innerHTML=t}async function checkDeleteMessage(e){if(confirm("Are you sure you want to delete this message?"))try{await deleteMessage(e),showToast("Message deleted successfully"),MessagesFunction()}catch(e){showToast2("Error deleting message")}}function filterMessages(){const e=document.getElementById("subjectFilter").value;document.querySelectorAll("#messagesModal tbody tr").forEach((t=>{const o=t.getAttribute("data-subject");t.style.display="all"===e||o===e?"":"none"}))}function showMessage(e){document.getElementById("messageContent").textContent=e}async function DownloadCsv(e){if("traffic"===e)try{await fetchTrafficCsv(),showToast("CSV file downloaded successfully")}catch(e){showToast2("Error downloading CSV file")}else if("EmailList"===e)try{await getCsvEmailsFile(),showToast("CSV file downloaded successfully")}catch(e){showToast2("Error downloading CSV file")}}messageBtn.addEventListener("click",MessagesFunction()),messageBtn1.addEventListener("click",MessagesFunction());